// { Driver Code Starts
// Initial template for C++
#include <bits/stdc++.h>
using namespace std;

struct node {
  int key;
  int value;
  node* next;    // next to the tail 
  node* prev;    // prev to the head
};
class LRU_queue{
  public:
    node head;
    node tail;
    LRU_queue(){  // constructor 
      head.next=&tail;
      head.prev=NULL;
      tail.prev=&head;
      tail.next=NULL;
    }
  node * create_node( int new_key , int new_value   ) {
    node *new_node= new  node;
    new_node->key=new_key;
    new_node->value=new_value;
    return new_node;
  }
  void add_node( node * new_node  ){
//    if(new_node->prev==&head){
//      return ;
//    }
    new_node->next=head.next;
    head.next->prev=new_node;  
    head.next=new_node;
    new_node->prev=&head;
  }
  void delete_node(node * del_node   ){
//    if(del_node->prev==&head){
//      return ;
//    }
    del_node->prev->next=del_node->next;
    del_node->next->prev=del_node->prev;
    delete del_node;    
  }
};


class LRUCache{
  public:
    unordered_map<int  , struct node *> my_cache;
    class LRU_queue lru_q;

    struct node * new_node1 = lru_q.create_node(key, val);
    map[key]=new_node1;
    lru_q.add_node(new_node1);

    key=2;
    val=30;

    struct node * new_node2 = lru_q.create_node(key, val);
    lru_q.add_node(new_node2);
    map[key]=new_node2;


    key=3;
    val=15;
    struct node * new_node3 = lru_q.create_node(key, val);
    lru_q.delete_node(map[1]);
    lru_q.add_node(new_node3);
    map.erase(1);
    map[key]=new_node3;





    //unordered_map <int ,  vector <int> *   >  mycache; // optimize for noe foor loop to find the data in the cache
    unordered_map <int ,  vector <int>    >  mycache; // optimize for noe foor loop to find the data in the cache
    set<int> my_set={};

    //vector < vector  <int>  > LRU_queue;
    vector <int > my_queue;
    int max_len;
    LRUCache(int capacity) {
      max_len=capacity;
    }
    int get(int key) {
      //     help(my_queue);
      /*
	 if (mycache[key]==0){
	 return -1;
	 }else{
	 unsigned int add= mycache[key];
	 int result = (*addr)[1];
	 LRU_queue.erase
	 vector <int> temp={key, result};

	 LRU_queue.insert(temp);




	 }*/
      if (my_set.count(key)==0){
	return -1; // not such key-value pair 
      }else{
	int result=mycache[key][0]; // may use loop to find the key priority 
	my_queue.erase(my_queue.begin()+mycache[key][1]);
	my_queue.insert(my_queue.begin(), key);
	mycache[key][1]=0;
	return result;
      }
      return -1;
    }
    void help( vector <int> & my_queue){
      for(int i =0 ; i < my_queue.size(); i ++){
	cout<<" val is  "<<my_queue[i]<<endl;
      }
    }
    void put(int key, int value) {
      cout<<"in put\n";
      help(my_queue);
      if (my_set.count(key)==0){// not hit 
	// case 1 fulled 
	//	cout<<"key " <<key<<endl;

	if(mycache.size()==max_len){  // may  use  loop to find key pri
	  int replace_key=my_queue.back();
	  my_queue.pop_back();
	  //	  cout<<" repalce key is " << replace_key<<endl;
	  //	  help(my_queue);
	  my_queue.insert(my_queue.begin() , key);
	  my_set.erase(replace_key);
	  my_set.insert(key);
	  mycache.erase(replace_key);
	  vector <int> temp={value , 0};
	  mycache[key]=temp; 
	  // case 2 not fulled 
	}else {
	  my_set.insert(key);
	  my_queue.insert(my_queue.begin(), key);
	  vector <int> temp={value, 0};
	  mycache[key]=temp;
	}

      }else if (my_set.count(key)==1){ // hit  // may use loop to find key Pri 
	mycache[key][0]=value;
	my_queue.erase(my_queue.begin()+mycache[key][1]);
	my_queue.insert(my_queue.begin(), key);
	mycache[key][1]=0;
      }
    }
    /////////////////////////////////
#ifdef DEBUG1
    auto iter = map.begin();
    while (iter != map.end()) {
      cout << "[" << iter->first << ","
	<<iter->second->key<<"," <<iter->second->value << "]\n";
      ++iter;
    }
    cout << endl;
#endif
    //////////////////////////////////////////////////////
};


int main() {

  unordered_map<int  , struct node *> map;
  int key=1;
  int val=20;
  class LRU_queue lru_q;
  struct node * new_node1 = lru_q.create_node(key, val);
  map[key]=new_node1;
  lru_q.add_node(new_node1);

  cout<<"key is "<<map[key]->key<<" value is "<<map[key]->value<<endl;
  key=2;
  val=30;

  struct node * new_node2 = lru_q.create_node(key, val);
  lru_q.add_node(new_node2);
  map[key]=new_node2;


  key=3;
  val=15;
  struct node * new_node3 = lru_q.create_node(key, val);
  lru_q.delete_node(map[1]);
  lru_q.add_node(new_node3);
  map.erase(1);
  map[key]=new_node3;



  return 0;

  class LRUCache mysolution(2);

  mysolution.put(1, 51);
  mysolution.put(2, 3);
  cout<<  mysolution.get(1)<<endl;
  mysolution.put(3, 3);
  cout<<  mysolution.get(2)<<endl;
  mysolution.put(4, 4);
  cout<<  mysolution.get(1)<<endl;
  cout<<  mysolution.get(3)<<endl;
  cout<<  mysolution.get(4)<<endl;
  return 0;

}  



// the following doesn't work due to the vector will dynamic adjust the address which cause map pointing to an segmenta fault
//**************************  not work for vector *****************************************//

/*
   int main(){
   unordered_map<int,   vector <int>* > map;
   vector < vector <int>> node;
   vector<int> test={2,20};
   node.push_back(test);


   map[2]=&node[0];
   cout<<(map[2])<<endl;
   vector<int> test2={3,22222};
   node.push_back(test2); 

   cout<<"value mape2 is "<<(*map[2])[1]<<endl;

   printf("map[2]  %p \n" ,map[2] );
   printf("node[0] %p \n" ,&node[0]);
   printf("test %p \n" ,&test);

   cout<<map[23];
   return 0;
   }
 */
// ***************************** end of vector method ***************************************




// *************************** the following method cause violation of timing ****
/*

   class LRUCache_time_violation{
   public:
   unordered_map <int , bool> inside_check; // optimize for noe foor loop to find the data in the cache
   vector <int> my_queue;
   vector < vector <int  > >  mycache;
   int max_len;
   LRUCache_time_violation(int capacity) {
   max_len=capacity;
   vector <int> temp;
   temp.push_back(-1);
   temp.push_back(-1);
   for (int i =0 ; i <capacity ; i++){
   mycache.push_back(temp);
   }
   }
   int  queue_hit(int key , vector <int > & my_queue   ){
   for (int i=0 ; i < my_queue.size(); i++){
   if (my_queue[i]==key){
   return i;
   }
   }
   return -1;
   }
   int get(int key) {
   for (int i=0 ; i < mycache.size() ; i++){
   if ( mycache[i][0]==key){
   int index=queue_hit(key, my_queue);
   if ( index >=0){
   my_queue.erase(my_queue.begin()+index);
   my_queue.insert( my_queue.begin() , key);
// re arrange the queue 
}else{
my_queue.insert(my_queue.begin() ,   key);
}
return mycache[i][1];
}
}
return -1;
}
void put(int key, int value) {
int index=queue_hit (key , my_queue);
if (my_queue.size()== max_len){
// evict the last used slot 
if(index>=0){
for (int i=0 ; i < mycache.size() ; i++){
if ( mycache[i][0]==key){
mycache[i][1]=value;
my_queue.erase(my_queue.begin()+index);
my_queue.insert(my_queue.begin(), key);
return;
}
}
}else{
int new_key=my_queue.back();
my_queue.pop_back();
// and put the new data in  mycache 
for (int i=0 ; i < mycache.size() ; i++){
if ( mycache[i][0]==new_key){
mycache[i][0]=key;
mycache[i][1]=value;
break;
}
}
my_queue.insert(my_queue.begin(),  key);
}

}else{
if (index >=0){
for (int i=0 ; i < mycache.size() ; i++){
if ( mycache[i][0]==key){
  mycache[i][1]=value;
  my_queue.erase(my_queue.begin()+index);
  my_queue.insert(my_queue.begin(), key);
  return;
}
}
}else{
  vector <int> temp={key, value};
  mycache.push_back(temp);
  my_queue.insert(my_queue.begin(), key);
}
}
}

};


*/
///////////////////// end of timing violation  method ////////
